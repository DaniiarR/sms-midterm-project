// Generated by gencpp from file midterm_project/WeatherResponse.msg
// DO NOT EDIT!


#ifndef MIDTERM_PROJECT_MESSAGE_WEATHERRESPONSE_H
#define MIDTERM_PROJECT_MESSAGE_WEATHERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace midterm_project
{
template <class ContainerAllocator>
struct WeatherResponse_
{
  typedef WeatherResponse_<ContainerAllocator> Type;

  WeatherResponse_()
    : temperature(0.0)
    , description()  {
    }
  WeatherResponse_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef double _temperature_type;
  _temperature_type temperature;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::midterm_project::WeatherResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::midterm_project::WeatherResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WeatherResponse_

typedef ::midterm_project::WeatherResponse_<std::allocator<void> > WeatherResponse;

typedef boost::shared_ptr< ::midterm_project::WeatherResponse > WeatherResponsePtr;
typedef boost::shared_ptr< ::midterm_project::WeatherResponse const> WeatherResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::midterm_project::WeatherResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::midterm_project::WeatherResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::midterm_project::WeatherResponse_<ContainerAllocator1> & lhs, const ::midterm_project::WeatherResponse_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::midterm_project::WeatherResponse_<ContainerAllocator1> & lhs, const ::midterm_project::WeatherResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace midterm_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::midterm_project::WeatherResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::midterm_project::WeatherResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::midterm_project::WeatherResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::midterm_project::WeatherResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::midterm_project::WeatherResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::midterm_project::WeatherResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::midterm_project::WeatherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "994a3c8e0c26ca272c9c41c196d3ee3a";
  }

  static const char* value(const ::midterm_project::WeatherResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x994a3c8e0c26ca27ULL;
  static const uint64_t static_value2 = 0x2c9c41c196d3ee3aULL;
};

template<class ContainerAllocator>
struct DataType< ::midterm_project::WeatherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "midterm_project/WeatherResponse";
  }

  static const char* value(const ::midterm_project::WeatherResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::midterm_project::WeatherResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 temperature\n"
"string description\n"
;
  }

  static const char* value(const ::midterm_project::WeatherResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::midterm_project::WeatherResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeatherResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::midterm_project::WeatherResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::midterm_project::WeatherResponse_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIDTERM_PROJECT_MESSAGE_WEATHERRESPONSE_H
